scalar Int64
scalar Time

directive @auth on FIELD_DEFINITION

input PaginationInput {
  limit: Int!
  page: Int!
}

input RegisterInput {
  username: String!
  email: String!
  password: String!
}

input LoginInput {
  email: String!
  password: String!
}

input PostInput {
  title: String!
  description: String!
  commentsEnabled: Boolean!
}

input CommentInput {
  postId: ID!
  content: String!
  parentId: ID
}

type ConnectionMeta {
  totalRow: Int!
  totalPages: Int!
  limit: Int!
  page: Int!
}

type PostsConnection {
  meta: ConnectionMeta
  rows: [Post!]
}

type CommentsConnection {
  meta: ConnectionMeta
  rows: [Comment!]
}

type AuthPayload {
  token: String!
  user: User!
}

type User {
  id: ID!
  username: String!
  email: String!
  passwordHash: String!

  createdAt: Time!
  updatedAt: Time!
}

type Post {
  id: ID!
  title: String!
  description: String!
  commentsEnabled: Boolean!
  totalComments: Int!

  user: User!
  comments(
    pagination: PaginationInput!
  ): CommentsConnection!

  createdAt: Time!
  updatedAt: Time!
}

type Comment {
  id: ID!
  content: String!

  user: User!
  parent: Comment
  replies(
    pagination: PaginationInput!
  ): CommentsConnection!

  createdAt: Time!
  updatedAt: Time!
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  getPosts(
    pagination: PaginationInput!
  ): PostsConnection! @auth
  getPostById(postId: ID!): Post @auth
  getReplies(
    commentId: ID!
  ): CommentsConnection! @auth
}

type Mutation {
  register(
    credentials: RegisterInput!
  ): AuthPayload!
  login(
    credentials: LoginInput!
  ): AuthPayload!

  createPost(
    input: PostInput!
  ): Post! @auth
  createComment(
    input: CommentInput!
  ): Comment! @auth
}

type Subscription {
  newComment(postId: ID!): Comment! @auth
}
