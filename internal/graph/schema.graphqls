scalar Time

directive @auth on FIELD_DEFINITION

input PaginationInput {
  limit: Int!
  offset: Int!
}

input AuthInput {
  username: String!
  password: String!
}

type User {
  id: ID!
  username: String!
  passwordHash: String!
  createdAt: Time!
  updatedAt: Time!
}

type AuthPayload {
  token: String!
  user: User!
}

type Post {
  id: ID!
  title: String!
  description: String!
  createdAt: Time!
  updatedAt: Time!
  commentsEnabled: Boolean!
  user: User!
  commentCount: Int!

  comments(pagination: PaginationInput): [Comment!]
}

type Comment {
  id: ID!
  content: String!
  createdAt: Time!
  updatedAt: Time!
  user: User!

  parent: Comment
  replies(pagination: PaginationInput): [Comment!]
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  posts: [Post!]! @auth
  post(id: ID!): Post @auth

  comments(postId: ID!): [Comment!] @auth
  replies(commentId: ID!): [Comment!] @auth
}

type Mutation {
  register(cred: AuthInput!): AuthPayload!
  login(cred: AuthInput!): AuthPayload!

  createPost(
    title: String!
    description: String!
    commentsEnabled: Boolean!
    userId: ID!
  ): Post! @auth

  createComment(
    postId: ID!,
    parentId: ID,
    content: String!
  ): Comment! @auth
}

type Subscription {
  newComment(postId: ID!): Comment! @auth
}
